"use strict";

(function () {
    // Class definition
    const {{entity}}Page = {
        table: null,
        formValidator: null,
        permissionFlags: AppUtils.getPermissionFlags(),
        variables: {
            isLoadingFromEdit: false
        },
        message: {
            pageTitle: I18n.t("{{entityName}}", "PAGE_TITLE"),
            actions: I18n.t("{{entityName}}", "ACTIONS"),
            create: I18n.t("{{entityName}}", "ADD_NEW"),
            edit: I18n.t("{{entityName}}", "EDIT"),
            delete: I18n.t("{{entityName}}", "DELETE"),
            detail: I18n.t("{{entityName}}", "DETAIL"),
            save: I18n.t("{{entityName}}", "SAVE"),
            cancel: I18n.t("{{entityName}}", "CANCEL"),
            back: I18n.t("{{entityName}}", "BACK"),
            forbidden: I18n.t("common", "FORBIDDEN"),
            confirmTittle: I18n.t("common", "CONFIRM_TITLE"),
            successTitle: I18n.t("common", "SUCCESS_TITLE"),
            errorTitle: I18n.t("common", "ERROR_TITLE"),
            failTitle: I18n.t("common", "FAIL_TITLE"),
            warningTitle: I18n.t("common", "WARNING_TITLE"),
            createConfirm: I18n.t("{{entityName}}", "CREATE_CONFIRM"),
            createSuccess: I18n.t("{{entityName}}", "CREATE_SUCCESS"),
            createError: I18n.t("{{entityName}}", "CREATE_ERROR"),
            updateConfirm: I18n.t("{{entityName}}", "UPDATE_CONFIRM"),
            updateSuccess: I18n.t("{{entityName}}", "UPDATE_SUCCESS"),
            updateError: I18n.t("{{entityName}}", "UPDATE_ERROR"),
            deleteConfirm: I18n.t("{{entityName}}", "DELETE_CONFIRM"),
            deleteSuccess: I18n.t("{{entityName}}", "DELETE_SUCCESS"),
            deleteError: I18n.t("{{entityName}}", "DELETE_ERROR"),
            notFound: I18n.t("{{entityName}}", "NOT_FOUND"),
            validationError: I18n.t("{{entityName}}", "VALIDATION_ERROR")
        },
        init: function () {
            this.checkPermissions();
            this.initDataTable();
            this.loadRelatedData();
            this.bindEvents();
            this.initFormValidator();
        },
        initDataTable: function () {
            if ($("#{{entityName}}_datatable").length === 0) return;
            
            this.table = $("#{{entityName}}_datatable").DataTable({
                processing: true,
                serverSide: true,
                paging: true,
                searching: { regex: true },
                order: [{{lastColumnIndex}}, 'desc'],
                language: AppSettings.dataTableLanguage.vi,
                ajax: {
                    url: ApiRoutes.{{entity}}.v1.PagedAdvanced,
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    headers: {
                        'Authorization': 'Bearer ' + TokenService.getAccessToken()
                    },
                    error: async function (xhr, status, error) {
                        if (xhr.status === 401) {
                            await TokenService.refreshToken();
                            const tableSettings = {{entity}}Page.table.settings()[0];
                            tableSettings.ajax.headers.Authorization = "Bearer " + TokenService.getAccessToken();
                            {{entity}}Page.table.ajax.reload();
                        }
                    },
                    dataSrc: {
                        data: 'resources.data',
                        draw: 'resources.draw',
                        recordsTotal: 'resources.recordsTotal',
                        recordsFiltered: 'resources.recordsFiltered'
                    },
                    data: function (d) {
                        return JSON.stringify(d);
                    }
                },
                columns: [
                    {
                        data: 'id',
                        render: function (data, type, row, meta) {
                            const info = {{entity}}Page.table.page.info();
                            const index = meta.row + 1 + info.page * info.length;
                            return index;
                        }
                    },
                    {{#each properties}}
                    {
                        data: '{{name}}',
                        render: function (data, type, row) {
                            {{#if (isEqual type "DateTime")}}
                            return data ? moment(data).format('DD/MM/YYYY HH:mm') : '';
                            {{else}}
                            return data || '';
                            {{/if}}
                        }
                    }{{#unless @last}},{{/unless}}
                    {{/each}}
                    ,
                    {
                        data: null,
                        orderable: false,
                        render: function (data, type, row) {
                            let actions = '';
                            if ({{entity}}Page.permissionFlags.canView) {
                                actions += `<a href="#" class="btn btn-sm btn-light btn-active-light-primary" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">${ {{entity}}Page.message.actions }<i class="ki-duotone ki-down fs-5 ms-1"></i></a>
                                    <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4" data-kt-menu="true">
                                        <div class="menu-item px-3">
                                            <a href="#" class="menu-link px-3" onclick="{{entity}}Page.view('${row.id}')">${ {{entity}}Page.message.detail }</a>
                                        </div>
                                        ${ {{entity}}Page.permissionFlags.canEdit ? `<div class="menu-item px-3">
                                            <a href="#" class="menu-link px-3" onclick="{{entity}}Page.edit('${row.id}')">${ {{entity}}Page.message.edit }</a>
                                        </div>` : '' }
                                        ${ {{entity}}Page.permissionFlags.canDelete ? `<div class="menu-item px-3">
                                            <a href="#" class="menu-link px-3" onclick="{{entity}}Page.delete('${row.id}')">${ {{entity}}Page.message.delete }</a>
                                        </div>` : '' }
                                    </div>`;
                            }
                            return actions;
                        }
                    }
                ]
            });
        },
        initFormValidator: function () {
            if ($("#kt_modal_{{entityName}}_form").length === 0) return;
            
            this.formValidator = new FormValidator({
                formSelector: "#kt_modal_{{entityName}}_form",
                handleSubmit: this.saveData.bind(this),
                rules: [
                    {{#each properties}}
                    {{#if isRequired}}
                    {
                        element: "#{{entityName}}_{{name}}",
                        rule: [
                            {
                                name: "required",
                                message: I18n.t("{{entityName}}", "{{name}}_REQUIRED")
                            }{{#if maxLength}},
                            {
                                name: "maxLength",
                                message: I18n.t("{{entityName}}", "{{name}}_TOO_LONG"),
                                params: {{maxLength}}
                            }{{/if}}
                        ]
                    }{{#unless @last}},{{/unless}}
                    {{/if}}
                    {{/each}}
                ]
            });
        },
        loadRelatedData: function () {
            // Load related data for dropdowns if needed
        },
        bindEvents: function () {
            // Form submit event
            $("#kt_modal_{{entityName}}_form").on('submit', (e) => {
                e.preventDefault();
                if (this.formValidator) {
                    this.formValidator.validate();
                }
            });
            
            // Cancel button
            $("#btn_cancel").on('click', () => {
                window.location.href = '/{{entityName}}/list';
            });
            
            // Back button
            $("#btn_back").on('click', () => {
                window.location.href = '/{{entityName}}/list';
            });
            
            // Edit button
            $("#btn_edit").on('click', () => {
                const urlParams = new URLSearchParams(window.location.search);
                const id = urlParams.get('id');
                window.location.href = `/{{entityName}}/form?id=${id}`;
            });
        },
        checkPermissions: function () {
            if (!this.permissionFlags.canView) {
                window.location.href = '/error/403';
            }
        },
        view: function (id) {
            window.location.href = `/{{entityName}}/detail?id=${id}`;
        },
        edit: function (id) {
            window.location.href = `/{{entityName}}/form?id=${id}`;
        },
        delete: function (id) {
            Swal.fire({
                title: this.message.confirmTittle,
                text: this.message.deleteConfirm,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Xóa",
                cancelButtonText: "Hủy"
            }).then((result) => {
                if (result.isConfirmed) {
                    this.performDelete(id);
                }
            });
        },
        performDelete: function (id) {
            HttpService.delete(ApiRoutes.{{entity}}.v1.Delete.replace('{id}', id))
                .then(response => {
                    Swal.fire({
                        title: this.message.successTitle,
                        text: this.message.deleteSuccess,
                        icon: "success"
                    });
                    if (this.table) {
                        this.table.ajax.reload();
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: this.message.errorTitle,
                        text: this.message.deleteError,
                        icon: "error"
                    });
                });
        },
        loadData: function () {
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');
            
            if (id) {
                this.variables.isLoadingFromEdit = true;
                this.loadEntityData(id);
            }
        },
        loadEntityData: function (id) {
            HttpService.get(ApiRoutes.{{entity}}.v1.GetById.replace('{id}', id))
                .then(response => {
                    this.populateForm(response.data);
                })
                .catch(error => {
                    Swal.fire({
                        title: this.message.errorTitle,
                        text: this.message.notFound,
                        icon: "error"
                    }).then(() => {
                        window.location.href = '/{{entityName}}/list';
                    });
                });
        },
        populateForm: function (data) {
            {{#each properties}}
            {{#if (isEqual type "DateTime")}}
            if (data.{{name}}) {
                $("#{{entityName}}_{{name}}").val(moment(data.{{name}}).format('YYYY-MM-DDTHH:mm'));
            }
            {{else}}
            $("#{{entityName}}_{{name}}").val(data.{{name}} || '');
            {{/if}}
            {{/each}}
        },
        displayData: function (data) {
            {{#each properties}}
            {{#if (isEqual type "DateTime")}}
            if (data.{{name}}) {
                $("#{{entityName}}_{{name}}").text(moment(data.{{name}}).format('DD/MM/YYYY HH:mm'));
            }
            {{else}}
            $("#{{entityName}}_{{name}}").text(data.{{name}} || '');
            {{/if}}
            {{/each}}
        },
        saveData: function () {
            const formData = new FormData(document.getElementById('kt_modal_{{entityName}}_form'));
            const data = Object.fromEntries(formData);
            
            const url = this.variables.isLoadingFromEdit ? 
                ApiRoutes.{{entity}}.v1.Update.replace('{id}', data.id) : 
                ApiRoutes.{{entity}}.v1.Create;
            const method = this.variables.isLoadingFromEdit ? 'PUT' : 'POST';
            
            HttpService[method.toLowerCase()](url, data)
                .then(response => {
                    Swal.fire({
                        title: this.message.successTitle,
                        text: this.variables.isLoadingFromEdit ? this.message.updateSuccess : this.message.createSuccess,
                        icon: "success"
                    }).then(() => {
                        window.location.href = '/{{entityName}}/list';
                    });
                })
                .catch(error => {
                    Swal.fire({
                        title: this.message.errorTitle,
                        text: this.variables.isLoadingFromEdit ? this.message.updateError : this.message.createError,
                        icon: "error"
                    });
                });
        }
    };

    // Global functions for backward compatibility
    window.saveData = function () {
        {{entity}}Page.saveData();
    };

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function () {
        {{entity}}Page.init();
        
        // Load data if on form or detail page
        if (window.location.pathname.includes('/form') || window.location.pathname.includes('/detail')) {
            {{entity}}Page.loadData();
        }
        
        // Display data if on detail page
        if (window.location.pathname.includes('/detail')) {
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');
            if (id) {
                {{entity}}Page.loadEntityData(id);
            }
        }
    });
})();
