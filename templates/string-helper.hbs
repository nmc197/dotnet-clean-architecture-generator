using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace {{projectName}}.Shared.Helpers
{
    public static class StringHelper
    {
        public static string Slugify(string input)
        {
            if (string.IsNullOrWhiteSpace(input))
                return string.Empty;

            string str = input.ToLowerInvariant();

            // Bước 1: Chuyển các ký tự tiếng Việt về dạng không dấu
            str = RemoveVietnameseDiacritics(str);

            // Bước 2: Xoá các ký tự không hợp lệ (chỉ giữ chữ cái, số, dấu cách và -)
            str = Regex.Replace(str, @"[^a-z0-9\s-]", "");

            // Bước 3: Đổi nhiều khoảng trắng hoặc dấu - liên tiếp thành một dấu -
            str = Regex.Replace(str, @"[\s-]+", "-").Trim('-');

            return str;
        }

        private static string RemoveVietnameseDiacritics(string input)
        {
            // Normalize to decomposed form (NFD)
            string normalized = input.Normalize(NormalizationForm.FormD);
            var sb = new StringBuilder();

            foreach (var c in normalized)
            {
                var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
                if (unicodeCategory != UnicodeCategory.NonSpacingMark)
                {
                    sb.Append(c);
                }
            }

            // Replace đặc biệt
            string result = sb.ToString()
                .Replace('đ', 'd')
                .Replace('Đ', 'D');

            return result.Normalize(NormalizationForm.FormC); // Optional
        }

        public static bool IsValidUsername(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return false;
            var regex = new Regex(@"^[a-zA-Z0-9]{6,30}$");
            return regex.IsMatch(input);
        }

        public static bool IsValidTaxCode(string taxCode)
        {
            taxCode = taxCode.Trim();
            var regex = new System.Text.RegularExpressions.Regex(@"^\d{10}(-\d{3})?$");
            return regex.IsMatch(taxCode);
        }

        public static bool IsValidIdentityNumber(string identityNumber)
        {
            identityNumber = identityNumber.Trim();
            var regex = new System.Text.RegularExpressions.Regex(@"^\d{12}(-\d{3})?$");
            return regex.IsMatch(identityNumber);
        }

        public static string ComputeHMACSHA256(string input, string key)
        {
            using (var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key)))
            {
                byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(input));
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
            }
        }
    }
}
