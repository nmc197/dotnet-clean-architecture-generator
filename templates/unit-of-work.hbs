using {{projectName}}.Domain.Abstractions;
using {{projectName}}.Domain.Interfaces.Repositories;
using {{projectName}}.Infrastructure.Persistence;
using {{projectName}}.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;

namespace {{projectName}}.Infrastructure.Repositories
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly {{projectName}}Context _context;
        private readonly IServiceProvider _serviceProvider;

        public UnitOfWork({{projectName}}Context context, IServiceProvider serviceProvider)
        {
            _context = context;
            _serviceProvider = serviceProvider;
        }

        // Repository properties
{{#each entities}}
        public I{{name}}Repository {{pluralize name}} => GetRepository<I{{name}}Repository>();
{{/each}}

        private T GetRepository<T>() where T : class
        {
            return _serviceProvider.GetRequiredService<T>();
        }

        public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            return await _context.SaveChangesAsync(cancellationToken);
        }

        public async Task BeginTransactionAsync(CancellationToken cancellationToken = default)
        {
            await _context.Database.BeginTransactionAsync(cancellationToken);
        }

        public async Task CommitTransactionAsync(CancellationToken cancellationToken = default)
        {
            await _context.Database.CommitTransactionAsync(cancellationToken);
        }

        public async Task RollbackTransactionAsync(CancellationToken cancellationToken = default)
        {
            await _context.Database.RollbackTransactionAsync(cancellationToken);
        }

        public void Dispose()
        {
            _context.Dispose();
        }
    }
}
